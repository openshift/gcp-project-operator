// Code generated by MockGen. DO NOT EDIT.
// Source: conditions.go

// Package condition is a generated GoMock package.
package condition

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	v1alpha1 "github.com/openshift/gcp-project-operator/pkg/apis/gcp/v1alpha1"
	v1 "k8s.io/api/core/v1"
)

// MockConditions is a mock of Conditions interface.
type MockConditions struct {
	ctrl     *gomock.Controller
	recorder *MockConditionsMockRecorder
}

// MockConditionsMockRecorder is the mock recorder for MockConditions.
type MockConditionsMockRecorder struct {
	mock *MockConditions
}

// NewMockConditions creates a new mock instance.
func NewMockConditions(ctrl *gomock.Controller) *MockConditions {
	mock := &MockConditions{ctrl: ctrl}
	mock.recorder = &MockConditionsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockConditions) EXPECT() *MockConditionsMockRecorder {
	return m.recorder
}

// FindCondition mocks base method.
func (m *MockConditions) FindCondition(conditions *[]v1alpha1.Condition, conditionType v1alpha1.ConditionType) (*v1alpha1.Condition, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindCondition", conditions, conditionType)
	ret0, _ := ret[0].(*v1alpha1.Condition)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// FindCondition indicates an expected call of FindCondition.
func (mr *MockConditionsMockRecorder) FindCondition(conditions, conditionType interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindCondition", reflect.TypeOf((*MockConditions)(nil).FindCondition), conditions, conditionType)
}

// HasCondition mocks base method.
func (m *MockConditions) HasCondition(conditions *[]v1alpha1.Condition, conditionType v1alpha1.ConditionType) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HasCondition", conditions, conditionType)
	ret0, _ := ret[0].(bool)
	return ret0
}

// HasCondition indicates an expected call of HasCondition.
func (mr *MockConditionsMockRecorder) HasCondition(conditions, conditionType interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HasCondition", reflect.TypeOf((*MockConditions)(nil).HasCondition), conditions, conditionType)
}

// SetCondition mocks base method.
func (m *MockConditions) SetCondition(conditions *[]v1alpha1.Condition, conditionType v1alpha1.ConditionType, status v1.ConditionStatus, reason, message string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetCondition", conditions, conditionType, status, reason, message)
}

// SetCondition indicates an expected call of SetCondition.
func (mr *MockConditionsMockRecorder) SetCondition(conditions, conditionType, status, reason, message interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetCondition", reflect.TypeOf((*MockConditions)(nil).SetCondition), conditions, conditionType, status, reason, message)
}
